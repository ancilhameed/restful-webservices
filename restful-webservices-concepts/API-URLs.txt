http://localhost:8001/hello-world/path-variable/Ancil%20Hameed%20A.T

http://localhost:8001/hello-world

http://localhost:8001/hello-world-bean

http://localhost:8001/users

http://localhost:8001/users/1


http://localhost:8001/hello-world-internationalized (Add Request Header 'Accept Langue - fr, nl, en')



http://localhost:8001/actuator - Actuator

http://localhost:8001/actuator/health

http://localhost:8001/actuator/metrics

http://localhost:8001/actuator/metrics/http.server.requests

http://localhost:8001/actuator/mappings

http://localhost:8001/actuator/beans

http://localhost:8001/swagger-ui.html

http://localhost:8001/v3/api-docs


#HAL Explorer
http://localhost:8001/explorer/index.html#



########################################

<!-- 		Earlier version of spring we were getting it with starter-web but recent version it was separated-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		
<!-- 		HATEOAS - Hypermedia As The Engine Of Application State [Used for Giving useful API's for a given Rest API] -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-hateoas</artifactId>
		</dependency>		
		//If we want to add useful links to our GET /users API then we need to use HATEOAS
		//We'll make use of EntityModel to return our Resource with useful links 
		EntityModel<User> userEntityModel = EntityModel.of(user);
		
		//If we just return EntityModel we wont get links, for adding links we need WebMvcLinkBuilder
		//It has 2 static methods linkTo and methodOn, which we'll use 
		WebMvcLinkBuilder webMvcLinkBuilder = WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(this.getClass()).retrieveAllUsers());
		
		//Instead of Hard Coding the URL we creates a link using method name, now we need to set it to EntityModel
		userEntityModel.add(webMvcLinkBuilder.withRel("all-users"));
		


		
<!-- 		Internationalization - i18n -> Customization of App for different countries & languages --> 
//For supposrting multiple languages we would require something like below configuration bt we cannot hardcode it below
	//So we use Spring Message Bundle

		
<!-- 		Content Negotiation - Adding below jackson dependency to support XML Response for our APIs -->
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
		</dependency>
		
<!-- 		Open API or Swagger - For documenting our Rest API's
Difference between OpenAPI and Swagger - OpenAPI was earlier called Swagger. Swagger was created in 2011,
when it created its specifications and also the Tools to play around its specifications. In future,
Swagger became popular, in 2015 Swagger was open sourced and it was renamed as OpenAPI. 
Only the Swagger Specification was open sourced, so only that part is called OpenAPI,
 tools to play around with Swagger is still called Swagger-->
		<dependency>
	      <groupId>org.springdoc</groupId>
	      <artifactId>springdoc-openapi-ui</artifactId>
	      <version>1.5.10</version>
	   </dependency>					
		
<!-- 	ACTUATOR -	Monitor and Manage the Application -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>			

<!-- 	HAL EXPLORER or HAL Bowser - A simple format that gives a consistent and easy way to hyperlink between resources in our API 
 When our API is supporting HATEOAS and also has Actuator then we can use HAL to see Visual representation. HAL explorer provides 
 simpler way to explore our Rest APIs.  Instead of using Rest API clients we can use HAL-->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-rest-hal-explorer</artifactId>
		</dependency>


#Implement Static Filtering, we can do this by using @JsonIgnore at property level or @JsonIgnorePropertes at Class level

#Dynamic filtering of Value using MappingJackSonValue @JsonFilter

http://localhost:8001/filtering

http://localhost:8001/filtering-list

#API Versioning
There is n Perfect Solution for this, API versioning is done as per the need there is no correct way as everything has its Pros & Cons.
There are four types of API versioning; URI VErsioning, Request Param Versioning, Header Versioning, MIME Type Versioning

#URI Versioning [Used by Twitter]
http://localhost:8001/person/v1 -> @GetMapping("/person/v1")
http://localhost:8001/person/v2 -> @GetMapping("/person/v2")

#Request Param Versioning [Used by Amazon]
http://localhost:8001/person/param?version=1  -> (@GetMapping(value = "/person/param", params="version=1"))
http://localhost:8001/person/param?version=2  -> (@GetMapping(value = "/person/param", params="version=2"))


#Header Versioning [Used by Microsoft]
http://localhost:8001/person/header [In Request Header we need to send Value API-VERSION=1]	@GetMapping(value = "/person/header", headers = "API-VERSION=1")
http://localhost:8001/person/header [In Request Header we need to send Value API-VERSION=2]	@GetMapping(value = "/person/header", headers = "API-VERSION=2")


#MIME Type Versioning [Used by Github]
http://localhost:8001/person/produces [In Request Header we need to send Value of 'Accept' as API-VERSION/1]	@GetMapping(value = "/person/header", headers = "API-VERSION=1")
http://localhost:8001/person/produces [In Request Header we need to send Value of 'Accept' as API-VERSION/2]	@GetMapping(value = "/person/header", headers = "API-VERSION=2")


#Cons of Versioning with different aspect
URI Pollution -> happening in URI & Request Param versioning
Header -> HTTP headers were never meant for Version, caching will be a problem as we would not eb ablr to
Exceution -> People using browser to call GET API cannot pass version in Headers
API Documentation -> URI & Request Param version ing is easy for Documentation..

In short no erfect solution everyone uses as per their need


#Spring Security - Basic Athentication
#Below is configured for Spring Security Basic Authentication, we get 401 UnAthorzed if we dont give User/Pwd
spring.security.user.name=ancil
spring.security.user.password=ancil




#######################################

